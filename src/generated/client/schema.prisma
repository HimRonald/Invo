// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role             Role      @default(CLIENT)
  invoicesSent     Invoice[] @relation("SellerInvoices")
  invoicesReceived Invoice[] @relation("ClientInvoices")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Role {
  SELLER
  CLIENT
}

enum InvoiceSatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

model Invoice {
  id        String       @id @default(uuid())
  sellerId  String
  clientId  String
  seller    User         @relation("SellerInvoices", fields: [sellerId], references: [id])
  client    User         @relation("ClientInvoices", fields: [clientId], references: [id])
  items     Item[]
  status    InvoiceSatus @default(DRAFT)
  total     Float
  dueDate   DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Item {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}
